{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"limnd2 package","text":"<p>Warning</p> <p>This Python package is not yet available for the public, both the package and the documentation is still being worked on.</p> <p><code>.nd2</code> (Nikon NIS Elements) file reader and writer in Python.</p>"},{"location":"#github-repository","title":"GitHub repository","text":"<p>Source code for this library can be found here</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>limnd2 package requires following packages (also listed in <code>requirements.txt</code>) to work correctly:</p> <ul> <li>python&gt;=3.12.0</li> <li>numpy</li> </ul>"},{"location":"#installation-scripts","title":"Installation scripts","text":"<p>This package and its prerequisites can be installed running following commands in Powershell / shell.</p>"},{"location":"#windows","title":"Windows","text":"<pre><code>powershell -Command \"Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/Laboratory-Imaging/Laboratory-Imaging.github.io/refs/heads/main/limnd2/setup_limnd2.bat' -OutFile 'setup_limnd2.bat'; &amp; '.\\setup_limnd2.bat'; Remove-Item 'setup_limnd2.bat'\"\n</code></pre>"},{"location":"#linux-macos-todo-test-script-when-repo-is-public","title":"Linux / MacOS   // TODO test script when repo is public","text":"<pre><code>curl -O https://raw.githubusercontent.com/Laboratory-Imaging/Laboratory-Imaging.github.io/refs/heads/main/limnd2/setup_limnd2.sh &amp;&amp; chmod +x setup_limnd2.sh &amp;&amp; ./setup_limnd2.sh &amp;&amp; rm ./setup.sh\n</code></pre>"},{"location":"#manual-installation","title":"Manual Installation","text":""},{"location":"#windows_1","title":"Windows","text":"<pre><code>git clone https://github.com/Laboratory-Imaging/limnd2.git\ncd limnd2\npython -m venv env\nenv\\Scripts\\activate\npython -m pip install --upgrade pip\npip install -r requirements.txt\ncode .\n</code></pre> <p>for building and uploading to private Pypi</p> <pre><code>pip install build setuptools twine\npython -m build\ntwine upload -r local dist\\*\n</code></pre>"},{"location":"#api-reference","title":"API reference","text":"<p>Here are the most important files in this library and an overview of what they contain:</p> <ul> <li>nd2.py - contains classes for opening ND2 files for reading and writing</li> <li>attributes.py - contains data structures about image attributes (width, height, component count, sequence count, ...)</li> <li>experiment.py - contains data structures about experiment loops (timeloop, z-stack, multipoint, ...)<ul> <li>experiment_factory.py - contains helpers for creating experiment data structure</li> </ul> </li> <li>metadata.py - contains data structures about image attributes (width, height, component count, sequence count, ...)</li> </ul>"},{"location":"attributes/","title":"Attributes module","text":""},{"location":"attributes/#limnd2.attributes.ImageAttributes","title":"ImageAttributes  <code>dataclass</code>","text":"<p>               Bases: <code>LVSerializable</code></p> <p>Dataclass for ND2 Image attributes chunk, stores mostly information about image width, height, number of components and bit depth of each pixel, as well as information about compression and total number of images.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.componentBytes","title":"componentBytes  <code>property</code>","text":"<pre><code>componentBytes: int\n</code></pre> <p>Size of component in bytes.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.componentCount","title":"componentCount  <code>property</code>","text":"<pre><code>componentCount: int\n</code></pre> <p>Returns number of components in the image.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.dtype","title":"dtype  <code>property</code>","text":"<pre><code>dtype: NumpyDTypeLike\n</code></pre> <p>Returns numpy datatype used for storing image data in Python.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.frameCount","title":"frameCount  <code>property</code>","text":"<pre><code>frameCount: int\n</code></pre> <p>Returns number of frames in the ND2 file.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.height","title":"height  <code>property</code>","text":"<pre><code>height: int\n</code></pre> <p>Returns height of the image in pixels.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.imageBytes","title":"imageBytes  <code>property</code>","text":"<pre><code>imageBytes: int\n</code></pre> <p>Total size of the image in bytes.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.lowerPowSizeList","title":"lowerPowSizeList  <code>property</code>","text":"<pre><code>lowerPowSizeList: list[int]\n</code></pre> <p>Returns list of powers of 2 between ND2_MIN_DOWNSAMPLED_SIZE and image resolution.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.pixelBytes","title":"pixelBytes  <code>property</code>","text":"<pre><code>pixelBytes: int\n</code></pre> <p>Size of pixel in bytes.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.powSize","title":"powSize  <code>property</code>","text":"<pre><code>powSize: int\n</code></pre> <p>Returns next power of 2 for bigger dimension.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.powSizeBase","title":"powSizeBase  <code>property</code>","text":"<pre><code>powSizeBase: int\n</code></pre> <p>Returns exponent used in powSize() function.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.safe_dtype","title":"safe_dtype  <code>property</code>","text":"<pre><code>safe_dtype: NumpyDTypeLike\n</code></pre> <p>Returns numpy datatype that will always be big enough to fit pixel component data.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.shape","title":"shape  <code>property</code>","text":"<pre><code>shape: tuple[int, int, int]\n</code></pre> <p>Returns shape of the image which can be used with in array (height_pixels, width_pixels, component_count)</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.strides","title":"strides  <code>property</code>","text":"<pre><code>strides: tuple[int, int, int]\n</code></pre> <p>Returns the strides of the image which can be used in numpy array</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.width","title":"width  <code>property</code>","text":"<pre><code>width: int\n</code></pre> <p>Returns width of the image in pixels.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.widthBytes","title":"widthBytes  <code>property</code>","text":"<pre><code>widthBytes: int\n</code></pre> <p>Size of image row in bytes.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.calcWidthBytes","title":"calcWidthBytes  <code>staticmethod</code>","text":"<pre><code>calcWidthBytes(width: int, bits: int, comps: int) -&gt; int\n</code></pre> <p>Calculates number of bytes per single image row.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(width: int, height: int, component_count: int, bits: int, sequence_count: int) -&gt; ImageAttributes\n</code></pre> <p>Warning</p> <p>This function is used for creating new ImageAttributes instance, usually for creating new .nd2 files with Nd2Writer class.</p> <p>Create ImageAttributes instance from simplified parameters:</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required <code>height</code> <code>int</code> <p>height in pixels</p> required <code>component_count</code> <code>int</code> <p>number of components</p> required <code>bits</code> <code>int</code> <p>number of bits per pixel component</p> required <code>sequence_count</code> <code>int</code> <p>total number of frames in ND2 file (product of size of each dimension)</p> required"},{"location":"attributes/#limnd2.attributes.ImageAttributes.from_lv","title":"from_lv  <code>staticmethod</code>","text":"<pre><code>from_lv(data: bytes | memoryview) -&gt; ImageAttributes\n</code></pre> <p>Decodes ImageAttributes from ND2 lite variant chunk.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.from_var","title":"from_var  <code>staticmethod</code>","text":"<pre><code>from_var(data: bytes | memoryview) -&gt; ImageAttributes\n</code></pre> <p>Decodes ImageAttributes from ND2 XML chunk.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.makeDownsampled","title":"makeDownsampled","text":"<pre><code>makeDownsampled(downsize: int | None = None) -&gt; ImageAttributes\n</code></pre> <p>Returns ImageAttributes for downsampled image using power of 2 image size.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.makeDownsampledFromPowBase","title":"makeDownsampledFromPowBase","text":"<pre><code>makeDownsampledFromPowBase(powBase: int) -&gt; ImageAttributes\n</code></pre> <p>Returns ImageAttributes for downsampled image using power of 2 exponent.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributes.to_lv","title":"to_lv","text":"<pre><code>to_lv() -&gt; bytes\n</code></pre> <p>Encodes ImageAttributes to ND2 lite variant chunk.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributesCompression","title":"ImageAttributesCompression","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enum for image compression.</p>"},{"location":"attributes/#limnd2.attributes.ImageAttributesPixelType","title":"ImageAttributesPixelType","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enum for pixel type.</p>"},{"location":"experiment/","title":"Experiment","text":""},{"location":"experiment_factory/","title":"Experiment factory module","text":"<p>This module contains helper classes and functions for creating ExperimentLevel instances using simplified parameters for each experiment type. Those instances should be used with Nd2Writer instance for altering / creating .nd2 files.</p> <p>Warning</p> <p>Since this module is used to creating experiment data structures, you should not use any part of this module if you only read an .nd2 file.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.MExp","title":"MExp","text":"<p>Data structure for creating multipoint experiment using list of x and y coordinates.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.MExp.__init__","title":"__init__","text":"<pre><code>__init__(frame_count: int, xcoords: list[float] = None, ycoords: list[float] = None)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>frame_count</code> <code>int</code> <p>number of frames in the experiment loop</p> required <code>xcoords</code> <code>list[float] = None</code> <p>list of x coordinates</p> <code>None</code> <code>ycoords</code> <code>list[float] = None</code> <p>list of y coordinates</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if lengths of coordinate lists are not equal to <code>frame_count</code>.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.MExp.create_experiment_level","title":"create_experiment_level","text":"<pre><code>create_experiment_level() -&gt; ExperimentLevel\n</code></pre> <p>Creates ExperimentLevel instance from simplified settings.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.NETExp","title":"NETExp","text":"<p>Data structure for creating non-equidistant timeloop experiment from list of periods.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.NETExp.__init__","title":"__init__","text":"<pre><code>__init__(periods: list[tuple[int, float]])\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>periods</code> <code>list[tuple[int, float]]</code> <p>list of periods, each period is a pair made of number of frames in given period and time delta in given period</p> required"},{"location":"experiment_factory/#limnd2.experiment_factory.NETExp.create_experiment_level","title":"create_experiment_level","text":"<pre><code>create_experiment_level() -&gt; ExperimentLevel\n</code></pre> <p>Creates ExperimentLevel instance from simplified settings.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.TExp","title":"TExp","text":"<p>Data structure for creating Timeloop experiment instance using number of frames and time between frames.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.TExp.__init__","title":"__init__","text":"<pre><code>__init__(frame_count: int, time_delta: float)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>frame_count</code> <code>int</code> <p>number of frames in the experiment loop</p> required <code>time_delta</code> <code>float</code> <p>time between frames in miliseconds</p> required"},{"location":"experiment_factory/#limnd2.experiment_factory.TExp.create_experiment_level","title":"create_experiment_level","text":"<pre><code>create_experiment_level() -&gt; ExperimentLevel\n</code></pre> <p>Creates ExperimentLevel instance from simplified settings.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.ZExp","title":"ZExp","text":"<p>Data structure for creating z-stack experiment using number of frames and distance between frames.</p>"},{"location":"experiment_factory/#limnd2.experiment_factory.ZExp.__init__","title":"__init__","text":"<pre><code>__init__(frame_count: int, stack_delta: float)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>frame_count</code> <code>int</code> <p>number of frames in the experiment loop</p> required <code>stack_delta</code> <code>float</code> <p>distance between frames in micrometers</p> required"},{"location":"experiment_factory/#limnd2.experiment_factory.create_experiment","title":"create_experiment","text":"<pre><code>create_experiment(*args: Exp) -&gt; ExperimentLevel\n</code></pre> <p>This function chains and nests several simplified experiments into single ExperimentLevel instance.</p> <p>Warning</p> <p>This function chains experiments without any consideration for their validity or order, experiments should follow timeloop, multipoint, z-stack order and each experiment type should be used at most once, however this function does not enforce any of this.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Exp</code> <p>list of simplified experiments to chain</p> <code>()</code>"},{"location":"metadata/","title":"Metadata module","text":""},{"location":"metadata/#limnd2.metadata.ChannelSettings","title":"ChannelSettings  <code>dataclass</code>","text":"<p>Warning</p> <p>This function is used for creating new PictureMetadata instance, usually for creating new .nd2 files with Nd2Writer class. Do not use this class if you simply read existing .nd2 file.</p> <p>Represents simplified settings for an image channel.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the channel.</p> <code>modality</code> <code>str | PicturePlaneModality | PicturePlaneModalityFlags</code> <p>The modality of the channel either as a string (e.g., fluorescence, brightfield) or as instance of PicturePlaneModality or PicturePlaneModalityFlags</p> <code>excitation_wavelength</code> <code>int</code> <p>The excitation wavelength in nanometers.</p> <code>emission_wavelength</code> <code>int</code> <p>The emission wavelength in nanometers.</p> <code>color</code> <code>str</code> <p>The color representation of the channel (e.g., \"red\", \"blue\", or hex code).</p> <code>microscope</code> <code>MicroscopeSettings | None</code> <p>MicroscopeSettings for given channel.</p>"},{"location":"metadata/#limnd2.metadata.ChannelSettings.convert","title":"convert","text":"<pre><code>convert(index) -&gt; tuple[PicturePlaneDesc, SampleSettings]\n</code></pre> <p>Converts channel settings to instance of PicturePlaneDesc and SampleSettings returned as a tuple.</p> <p>Returns:</p> Type Description <code>tuple[PicturePlaneDesc, SampleSettings]</code> <p>Created plane description and corresponsing sample settings.</p>"},{"location":"metadata/#limnd2.metadata.ChannelSettings.modality_flags","title":"modality_flags","text":"<pre><code>modality_flags() -&gt; PicturePlaneModalityFlags\n</code></pre> <p>Converts provided modality to instance of PicturePlaneModalityFlags, which is stored in nd2 file. Do not use this class if you simply read existing .nd2 file.</p> <p>Returns:</p> Type Description <code>PicturePlaneModalityFlags</code> <p>PicturePlaneModalityFlags instance with modality.</p>"},{"location":"metadata/#limnd2.metadata.MicroscopeSettings","title":"MicroscopeSettings  <code>dataclass</code>","text":"<p>Warning</p> <p>This function is used for creating new PictureMetadata instance, usually for creating new .nd2 files with Nd2Writer class. Do not use this class if you simply read existing .nd2 file.</p> <p>Represents simplifies settings for a microscope, not used for reading ND2 file.</p> <p>Attributes:</p> Name Type Description <code>objective_magnification</code> <code>float</code> <p>The magnification power of the microscope's objective lens.</p> <code>objective_numerical_aperture</code> <code>float</code> <p>The numerical aperture of the objective lens.</p> <code>zoom_magnification</code> <code>float</code> <p>The zoom magnification factor.</p> <code>immersion_refractive_index</code> <code>float</code> <p>The refractive index of the immersion medium.</p> <code>pinhole_diameter</code> <code>float</code> <p>The diameter of the pinhole in micrometers.</p> <code>camera_name</code> <code>str</code> <p>Name of the camera used.</p> <code>microscope_name</code> <code>str</code> <p>Name of the microscope used.</p>"},{"location":"metadata/#limnd2.metadata.PictureMetadataPicturePlanes","title":"PictureMetadataPicturePlanes  <code>dataclass</code>","text":"<p>               Bases: <code>LVSerializable</code></p>"},{"location":"metadata/#limnd2.metadata.PictureMetadataPicturePlanes.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre> <p>Checks if PictureMetadataPicturePlanes insance has valid number of channels.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if number of channels is valid, False otherwise.</p>"},{"location":"metadata/#limnd2.metadata.PictureMetadataPicturePlanes.makeValid","title":"makeValid","text":"<pre><code>makeValid(comps: int, **kwargs) -&gt; None\n</code></pre> <p>Attempts to fix info about channels using specified number of channels.</p> <p>This function creates channel info basec on component count like this:</p> <p>comps = 1: function creates one Mono channel</p> <p>comps = 2: function creates channels Channel_1, Channel_2</p> <p>comps = 3: function creates one RGB channel</p> <p>comps &gt;= 4: function creates channels Channel_1 ... Channel_N</p> <p>Parameters:</p> Name Type Description Default <code>comps</code> <code>int</code> <p>The number of components in the image.</p> required <code>**kwargs</code> <code>dict</code> <p>Additional parameters to pass to each plane.</p> <code>{}</code>"},{"location":"metadata/#limnd2.metadata.PictureMetadataPicturePlanes.to_serializable_dict","title":"to_serializable_dict","text":"<pre><code>to_serializable_dict(parent_path='')\n</code></pre> <p>Converts dataclass to Python dictionary encodeable with LV encoder.</p>"},{"location":"metadata/#limnd2.metadata.PictureMetadataPicturePlanes.to_table","title":"to_table","text":"<pre><code>to_table() -&gt; dict[str, any]\n</code></pre> <p>Converts picture planes metadata to a treeview table.</p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneDesc","title":"PicturePlaneDesc  <code>dataclass</code>","text":"<p>               Bases: <code>LVSerializable</code></p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneDesc.to_serializable_dict","title":"to_serializable_dict","text":"<pre><code>to_serializable_dict(parent_path='')\n</code></pre> <p>Custom serialization for this object - \"sizeObjFullChip_cy\" has to be renamed to \"sizeObjFullChip.cy\"</p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneModality","title":"PicturePlaneModality","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enum for modality of given plane.</p> <p>Warning</p> <p>In modern .nd2 files this modality enum should be converted to PicturePlaneModalityFlags instance using from_modality() function.</p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneModalityFlags","title":"PicturePlaneModalityFlags","text":"<p>               Bases: <code>IntFlag</code></p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneModalityFlags.from_modality","title":"from_modality  <code>staticmethod</code>","text":"<pre><code>from_modality(mod: PicturePlaneModality) -&gt; PicturePlaneModalityFlags\n</code></pre> <p>Converts modality enum to PicturePlaneModalityFlags.</p> <p>Parameters:</p> Name Type Description Default <code>mod</code> <code>PicturePlaneModality</code> <p>modality enum instance</p> required <p>Returns:</p> Type Description <code>PicturePlaneModalityFlags</code> <p>Modalify flag for given modality</p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneModalityFlags.from_modality_string","title":"from_modality_string  <code>staticmethod</code>","text":"<pre><code>from_modality_string(modality: str) -&gt; PicturePlaneModalityFlags\n</code></pre> <p>Converts modality string to PicturePlaneModalityFlags.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>string</code> <p>modality string (for example \"Wide-field\", \"Brightfield\", \"Phase\", ...)</p> required <p>Returns:</p> Type Description <code>PicturePlaneModalityFlags</code> <p>Modalify flag for given modality, 0 for \"undefined\"</p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneModalityFlags.modality_list","title":"modality_list  <code>staticmethod</code>","text":"<pre><code>modality_list() -&gt; list[str]\n</code></pre> <p>Returns list of known modality strings (\"Wide-field\", \"Brightfield\", ...).</p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneModalityFlags.modality_string_map","title":"modality_string_map  <code>staticmethod</code>","text":"<pre><code>modality_string_map() -&gt; dict[str, PicturePlaneModalityFlags]\n</code></pre> <p>Returns mapping of known modality strings (\"Wide-field\", \"Brightfield\", ...) to PicturePlaneModalityFlags.</p>"},{"location":"metadata/#limnd2.metadata.PicturePlaneModalityFlags.to_str_list","title":"to_str_list  <code>staticmethod</code>","text":"<pre><code>to_str_list(flags: PicturePlaneModalityFlags) -&gt; list[str]\n</code></pre> <p>Converts modality flags to list of human readable strings.</p> <p>Parameters:</p> Name Type Description Default <code>flags</code> <code>PicturePlaneModalityFlags</code> <p>odality flags</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>human readable string list, for example [\"Brightfield\", \"Phase\"]</p>"},{"location":"metadata/#limnd2.metadata.calculateColor","title":"calculateColor","text":"<pre><code>calculateColor(color_string: str) -&gt; int\n</code></pre> <p>Calculates channel color integer (used as uiColor).</p> <p>Parameters:</p> Name Type Description Default <code>color_string</code> <code>str</code> <p>Color to be converted, either as hex string (\"#ff0000\"), common colors are also supported (\"Red\").</p> required <p>Returns:</p> Type Description <code>int</code> <p>converted color value</p>"},{"location":"metadata/#limnd2.metadata.create_metadata","title":"create_metadata","text":"<pre><code>create_metadata(channels: list[ChannelSettings], pixel_calibration: float = 0.0, microscope: MicroscopeSettings = None) -&gt; PictureMetadata\n</code></pre> <p>Warning</p> <p>This function is used for creating new PictureMetadata instance, usually for creating new .nd2 files with Nd2Writer class.</p> <p>Creates PictureMetadata instance from simplified information about channels and microscope, not used for reading ND2 file.</p> <p>Parameters:</p> Name Type Description Default <code>channels</code> <code>list[ChannelSettings]</code> <p>List of ChannelSetting instances, which contain channel names, modality, wavelength info and color.</p> required <code>pixel_calibration</code> <code>float = 0.0</code> <p>Size of one pixel in micrometers</p> <code>0.0</code> <code>microscope</code> <code>MicroscopeSettings</code> <p>MicroscopeSettings for ALL channels (overwrites MicroscopeSettings stored in each channel).</p> <code>None</code> <p>Returns:</p> Type Description <code>PictureMetadata</code> <p>PictureMetadata instance with channel and microsope information.</p>"},{"location":"nd2/","title":"Nd2","text":""},{"location":"nd2/#limnd2.nd2.Nd2Reader","title":"Nd2Reader","text":"<p>Class for reading ND2 files and its attributes, metadata, properties, image data and so on.</p>"},{"location":"nd2/#limnd2.nd2.Nd2Reader--usage","title":"Usage","text":"<p>Create Nd2 reader instance like this (use <code>with</code> statement to automatically close a file).</p> <pre><code>import limnd2\nwith limnd2.Nd2Reader('file.nd2') as nd2:\n    attributes = nd2.imageAttributes       # to get image attributes, see ImageAttributes class\n    experiment = nd2.experiment            # to get experiments in an image, see ExperimentLevel class\n    metadata = nd2.pictureMetadata         # to get image metadata, see PictureMetadata class\n\n\n    print(f\"Image resolution: {attributes.width} x {attributes.height}, # of components: {attributes.componentCount}\")\n\n    for i in range(attributes.componentCount):\n        image = nd2.image(i)                            # get image with given sequence index\n</code></pre>"},{"location":"nd2/#limnd2.nd2.Nd2Reader.__init__","title":"__init__","text":"<pre><code>__init__(file: FileLikeObject, *, chunker_kwargs: dict = {}) -&gt; None\n</code></pre> <p>Initializes ND2 reader.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str | Path | int | BinaryIO</code> <p>Filename of the ND2 file.</p> required <code>chunker_kwargs</code> <code>dict</code> <p>Additional parameters for chunker.</p> <code>{}</code>"},{"location":"nd2/#limnd2.nd2.Nd2Writer","title":"Nd2Writer","text":"<p>Experimental ND2 file writer.</p> <p>Supports encoding od all image attributes, most commonly used experiments and most of image metadata. Currently does not support encoding of Wellplates, binary layers, ROIs and any custom data and text into chunk.</p> <p>Python dataclasses encodeable by this writer inherit from LVSerializable class, in those classes attributes stored with UNKNOWN, ENCODING_NOT_IMPLEMENTED and DO_NOT_ENCODE enum will not be encoded.</p>"},{"location":"nd2/#limnd2.nd2.Nd2Writer.__init__","title":"__init__","text":"<pre><code>__init__(file: FileLikeObject, *, append: bool | None = None, chunker_kwargs: dict = {}) -&gt; None\n</code></pre> <p>Either opens existing .nd2 file for writing (adding or overwriting) chunks or creates an empty .nd2 file.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str | Path | int | BinaryIO</code> <p>Filename of the ND2 file.</p> required <code>chunker_kwargs</code> <code>dict</code> <p>Additional parameters for chunker.</p> <code>{}</code>"}]}